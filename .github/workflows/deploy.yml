name: deploy-aws

on: 
  push:
    branches:
      - main

jobs:
  terraform:
    name: Setup Terraform and Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}

      - name: Set EC2 IP
        id: ec2_ip
        run: |
          EC2_IP=$(terraform output -raw ec2_ip)
          echo "::set-output name=ec2_ip::$EC2_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
        working-directory: ./infra

      - name: Set Database URL
        id: database_url
        run: |
          DATABASE_URL=$(terraform output -raw database_url)
          echo "::set-output name=database_url::$DATABASE_URL"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
        working-directory: ./infra
          
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t consoft-api:latest .
      
      - name: Tag Docker image
        run: docker tag consoft-api:latest ${{ secrets.DOCKER_HUB_USERNAME }}/consoft-api:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/consoft-api:latest

  deploy:
    name: Deploy Application on EC2
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure SSH Keys
        run: |
          echo "${{secrets.ssh_pub}}" > ssh-file.pub
          echo "${{secrets.ssh_priv}}" > ssh-file
          chmod 600 ssh-file
          ssh-add ssh-file

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIV }}

      - name: Deploy Docker Image to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{steps.ec2_ip.outputs.ec2_ip}} << 'EOF'
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/consoft-api:latest
          docker stop consoft-api || true
          docker rm consoft-api || true
          docker run -d -env DATABASE_URL=${{steps.database_url.outputs.database_url}} --name consoft-api -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/consoft-api:latest
          EOF
